name: One-Click K8s Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (dev, test)'
        required: true
        default: 'dev'
        type: choice
        options: [dev, test]
      action:
        description: 'Terraform action (apply, destroy, refresh)'
        required: true
        default: 'apply'
        type: choice
        options: [apply, destroy, refresh]
      provider:
        description: 'AI Provider (google, openai) for k8sGPT'
        required: true
        default: 'google'
        type: choice
        options: [google, openai]
      run_security_scan:
        description: 'Run security scans only?'
        required: false
        default: false
        type: boolean
      run_terraform:
        description: 'Run Terraform deploy?'
        required: false
        default: false
        type: boolean
      run_application_deployment:
        description: 'Run Application deployment?'
        required: false
        default: false
        type: boolean
      apps:
        description: 'Apps to deploy (any of: nodejs, nginx, k8sgpt)'
        required: false
        default: 'nodejs,nginx,k8sgpt'
        type: string
      install_ingress:
        description: 'Install NGINX Ingress Controller (true/false)'
        required: false
        default: true
        type: boolean

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  security-scan:
    if: ${{ github.event.inputs.run_security_scan == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v5

      # Terraform IaC scan
      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: terraform
          format: csv
          soft_fail: true
          github_token: ${{ secrets.GH_PAT }}

      # Trivy scan nginx (only if present in apps)
      - name: Run Trivy scan on nginx
        if: contains(github.event.inputs.apps, 'nginx')
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: nginx:latest
          format: table
          exit-code: '0'
          severity: 'CRITICAL,HIGH'
          github-pat: ${{ secrets.GH_PAT }}

      # Trivy scan k8sgpt (only if present in apps)
      - name: Run Trivy scan on k8sgpt
        if: contains(github.event.inputs.apps, 'k8sgpt')
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ghcr.io/k8sgpt-ai/k8sgpt:latest
          format: table
          exit-code: '0'
          severity: 'CRITICAL,HIGH'
          github-pat: ${{ secrets.GH_PAT }}

  terraform-k8s:
    if: ${{ github.event.inputs.run_terraform == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v5

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Configure AWS CLI
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          AWS_REGION="us-east-1"
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region $AWS_REGION
          echo "ENVIRONMENT=${ENVIRONMENT}" >> $GITHUB_ENV
          echo "TFVARS_FILE=${ENVIRONMENT}.tfvars" >> $GITHUB_ENV

      - name: Pre-bootstrap S3 & DynamoDB
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          AWS_REGION="us-east-1"
          chmod +x terraform/bootstrap/prebootstrap.sh
          ./terraform/bootstrap/prebootstrap.sh "$ENVIRONMENT" "$AWS_REGION"

      - name: Terraform Init (Remote S3 Backend)
        run: |
          cd terraform
          export AWS_REGION="us-east-1"
          terraform init -input=false -reconfigure \
            -backend-config="bucket=tf-state-${ENVIRONMENT}-state" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="region=$AWS_REGION" \
            -backend-config="dynamodb_table=terraform-locks-${ENVIRONMENT}"

      - name: Terraform Fmt & Validate
        run: |
          cd terraform
          terraform fmt -check -recursive
          terraform validate

      - name: Execute Terraform
        run: |
          cd terraform
          ACTION="${{ github.event.inputs.action }}"
          case "$ACTION" in
            apply)
              terraform plan -var-file="$TFVARS_FILE" -out=tfplan
              terraform apply tfplan
              ;;
            destroy)
              terraform plan -destroy -var-file="$TFVARS_FILE" -out=tfplan-destroy
              terraform apply -auto-approve tfplan-destroy
              ;;
            refresh)
              terraform refresh -var-file="$TFVARS_FILE"
              ;;
            *)
              echo "Unknown action: $ACTION"
              exit 1
              ;;
          esac

  kubernetes-deploy:
    if: ${{ github.event.inputs.run_application_deployment == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v5

      - name: Validate apps input (nodejs, nginx, k8sgpt only)
        run: |
          APPS="${{ github.event.inputs.apps }}"
          echo "Requested apps: $APPS"
          INVALID=$(echo "$APPS" | tr ',' ' ' | tr '[:upper:]' '[:lower:]' | \
            awk '{for(i=1;i<=NF;i++){ if ($i!="nodejs" && $i!="nginx" && $i!="k8sgpt"){ print $i }}}')
          if [ -n "$INVALID" ]; then
            echo "Error: Unsupported app(s): $INVALID"
            exit 1
          fi

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Setup Terraform (to read outputs)
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Docker Login (only if building images)
        if: contains(github.event.inputs.apps, 'nodejs') && github.event.inputs.action == 'apply'
        run: echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

      - name: Prepare env vars (TFVARS, region, cluster)
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment }}
          TFVARS_FILE="${ENVIRONMENT}.tfvars"
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
          echo "TFVARS_FILE=$TFVARS_FILE" >> $GITHUB_ENV
          AWS_REGION=$(grep aws_region terraform/$TFVARS_FILE | awk -F'=' '{print $2}' | xargs)
          echo "AWS_REGION=$AWS_REGION" >> $GITHUB_ENV
          CLUSTER_NAME=$(terraform -chdir=terraform output -raw cluster_name)
          echo "CLUSTER_NAME=$CLUSTER_NAME" >> $GITHUB_ENV

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region "$AWS_REGION" --name "$CLUSTER_NAME"
          kubectl version --client

      # ---------- OPTIONAL: Build & Scan NODEJS if selected ----------
      - name: Resolve Node.js image from tfvars
        if: contains(github.event.inputs.apps, 'nodejs')
        run: |
          NODEJS_IMAGE=$(grep nodejs_docker_image terraform/$TFVARS_FILE | awk -F'=' '{print $2}' | xargs)
          echo "NODEJS_IMAGE=$NODEJS_IMAGE" >> $GITHUB_ENV

      - name: Build & Push Node.js App Image
        if: contains(github.event.inputs.apps, 'nodejs')
        run: |
          cd apps/nodejs-app
          docker build --no-cache -t "$NODEJS_IMAGE" .
          docker push "$NODEJS_IMAGE"

      - name: Trivy scan on Node.js image
        if: contains(github.event.inputs.apps, 'nodejs')
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.NODEJS_IMAGE }}
          format: table
          exit-code: '0'
          severity: 'CRITICAL,HIGH'
          github-pat: ${{ secrets.GH_PAT }}

      # ---------- Install Ingress Controller (toggle) ----------
      - name: Install NGINX Ingress Controller
        if: ${{ github.event.inputs.install_ingress == 'true' }}
        run: |
          kubectl apply -f https://github.com/kubernetes/ingress-nginx/controller-v1.13.0/deploy/static/provider/aws/deploy.yaml
          kubectl wait --namespace ingress-nginx \
            --for=condition=ready pod --selector=app.kubernetes.io/component=controller \
            --timeout=180s

      # ---------- Provider secrets ONLY IF k8sgpt selected ----------
      - name: Create k8sGPT secret (OpenAI)
        if: contains(github.event.inputs.apps, 'k8sgpt') && github.event.inputs.provider == 'openai'
        run: |
          kubectl create secret generic k8sgpt-secret \
            --from-literal=OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create k8sGPT secret (Google)
        if: contains(github.event.inputs.apps, 'k8sgpt') && github.event.inputs.provider == 'google'
        run: |
          kubectl create secret generic k8sgpt-secret \
            --from-literal=GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }} \
            --dry-run=client -o yaml | kubectl apply -f -

      # ---------- Apply manifests selectively ----------
      - name: Deploy NGINX (selected)
        if: contains(github.event.inputs.apps, 'nginx')
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          cp k8s/nginx.yaml k8s/temp.yaml && envsubst < k8s/temp.yaml > k8s/nginx.yaml && rm k8s/temp.yaml
          kubectl apply -f k8s/nginx.yaml

      - name: Deploy Node.js (selected)
        if: contains(github.event.inputs.apps, 'nodejs')
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          cp k8s/nodejs-app.yaml k8s/temp.yaml && envsubst < k8s/temp.yaml > k8s/nodejs-app.yaml && rm k8s/temp.yaml
          kubectl apply -f k8s/nodejs-app.yaml

      - name: Deploy k8sGPT (selected, provider-aware)
        if: contains(github.event.inputs.apps, 'k8sgpt')
        run: |
          PROVIDER="${{ github.event.inputs.provider }}"
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          cp "k8s/k8sgpt-${PROVIDER}.yaml" k8s/temp.yaml && envsubst < k8s/temp.yaml > "k8s/k8sgpt-${PROVIDER}.yaml" && rm k8s/temp.yaml
          kubectl apply -f "k8s/k8sgpt-${PROVIDER}.yaml"
          cp k8s/k8sgpt-setup.yaml k8s/temp.yaml && envsubst < k8s/temp.yaml > k8s/k8sgpt-setup.yaml && rm k8s/temp.yaml
          kubectl apply -f k8s/k8sgpt-setup.yaml

      - name: Apply Ingress manifest (if installed)
        if: ${{ github.event.inputs.install_ingress == 'true' }}
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          cp k8s/ingress.yaml k8s/temp.yaml && envsubst < k8s/temp.yaml > k8s/ingress.yaml && rm k8s/temp.yaml
          kubectl apply -f k8s/ingress.yaml
          echo "Waiting for Ingress endpoint..."
          INGRESS_NAME="main-ingress"
          for i in {1..30}; do
            HOST=$(kubectl -n default get ingress $INGRESS_NAME -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            if [ -n "$HOST" ]; then
              echo "Ingress ready: http://$HOST"
              break
            fi
            echo "Waiting 10s..."
            sleep 10
          done

      - name: Verify Kubernetes resources
        run: |
          kubectl get deployments -A
          kubectl get svc -A
          kubectl get hpa -A
