name: One-Click K8s Deployment

on:
  workflow_dispatch:
    inputs:
      # push:
      #   branches:
      #     - main
      #   paths-ignore:
      #     - 'README.md'

      # pull_request:
      #   branches:
      #     - main
      #   paths-ignore:
      #     - 'README.md'
      environment:
        description: 'Environment to deploy (dev, test)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - test
      action:
        description: 'Terraform action (apply, destroy, refresh)'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy
          - refresh
      provider:
        description: 'AI Provider(openai, google)'
        required: true
        default: 'google'
        type: choice
        options:
          - google
          - openai
      run_security_scan:
        description: 'Run security scans only?'
        required: false
        default: false
        type: boolean
      run_terraform:
        description: 'Run Terraform deploy?'
        required: false
        default: false
        type: boolean
      run_application_deployment:
        description: 'Run Application deployment?'
        required: false
        default: false
        type: boolean

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  security-scan:
    if: ${{ github.event.inputs.run_security_scan == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v5

      # Terraform IaC scan
      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: terraform
          format: csv         
          soft_fail: true
          # output: terraform/tfsec.sarif
          github_token: ${{ secrets.GH_PAT }}

      # Trivy scan nginx
      - name: Run Trivy scan on nginx
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: nginx:latest
          format: table
          exit-code: '0'
          severity: 'CRITICAL,HIGH'
          github-pat: ${{ secrets.GH_PAT }}
          # output: trivy-nginx.sarif

      # Trivy scan k8sgpt
      - name: Run Trivy scan on k8sgpt
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ghcr.io/k8sgpt-ai/k8sgpt:latest
          format: table
          exit-code: '0'
          severity: 'CRITICAL,HIGH'
          github-pat: ${{ secrets.GH_PAT }}
          # output: trivy-k8sgpt.sarif

  terraform-k8s:
    if: ${{ github.event.inputs.run_terraform == 'true' }}
    needs: security-scan
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v5

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Configure AWS CLI
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          AWS_REGION="us-east-1"
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region $AWS_REGION
          echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV && echo "TFVARS_FILE=${{ github.event.inputs.environment }}.tfvars" >> $GITHUB_ENV

      - name: Pre-bootstrap S3 & DynamoDB
        run: |
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          ACTION="${{ github.event.inputs.action }}"
          AWS_REGION="us-east-1"
          chmod +x terraform/bootstrap/prebootstrap.sh
          ./terraform/bootstrap/prebootstrap.sh $ENVIRONMENT $AWS_REGION

      - name: Terraform Init (Remote S3 Backend)
        run: |
          cd terraform
          export AWS_REGION="us-east-1"
          terraform init -input=false -reconfigure \
            -backend-config="bucket=tf-state-${ENVIRONMENT}-state" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="region=$AWS_REGION" \
            -backend-config="dynamodb_table=terraform-locks-${ENVIRONMENT}"

      - name: Terraform Fmt
        run: |
          cd terraform
          terraform fmt -check -recursive

      - name: Terraform Validate
        run: |
          cd terraform
          terraform validate

      - name: Execute Terraform
        run: |
          cd terraform
          ACTION="${{ github.event.inputs.action }}"
          case "$ACTION" in
            apply)
              terraform plan -var-file="$TFVARS_FILE" -out=tfplan
              terraform apply tfplan
              ;;
            destroy)
              terraform plan -destroy -var-file="$TFVARS_FILE" -out=tfplan-destroy
              terraform apply -auto-approve tfplan-destroy
              ;;
            refresh)
              terraform refresh -var-file="$TFVARS_FILE"
              ;;
            *)
              echo "Unknown action: $ACTION"
              exit 1
              ;;
          esac

  kubernetes-deploy:
    if: ${{ github.event.inputs.run_application_deployment == 'true' }}
    runs-on: ubuntu-latest
    needs: terraform-k8s
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v5
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Verify kubectl version
        run: kubectl version --client
      
      - name: Docker Login
        if: ${{ github.event.inputs.action == 'apply' }}
        run: echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

      - name: Build & Push Node.js App Image
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment }}; TFVARS_FILE="${ENVIRONMENT}.tfvars"; echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV; echo "TFVARS_FILE=$TFVARS_FILE" >> $GITHUB_ENV
          NODEJS_IMAGE=$(grep nodejs_docker_image terraform/$TFVARS_FILE | awk -F'=' '{print $2}' | xargs)
          echo "NODEJS_IMAGE=$NODEJS_IMAGE" >> $GITHUB_ENV
          cd apps/nodejs-app
          docker build --no-cache -t $NODEJS_IMAGE .
          docker push $NODEJS_IMAGE

#      - name: Build & Push mini-budget-tracker App Image
#        run: |
#          BUDGET_APP_IMAGE=$(grep mini_budget_tracker_image terraform/$TFVARS_FILE | awk -F'=' '{print $2}' | xargs)
#          cd apps/mini-budget-tracker
#          docker build --progress=plain --no-cache -t $BUDGET_APP_IMAGE .
#          docker push $BUDGET_APP_IMAGE

      - name: Build & Push Retro Arcade Galaxy App Image
        run: |
          ENVIRONMENT=${{ github.event.inputs.environment }}
          TFVARS_FILE="${ENVIRONMENT}.tfvars"
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
          echo "TFVARS_FILE=$TFVARS_FILE" >> $GITHUB_ENV
          
          RETRO_ARCADE_IMAGE=$(grep retro_arcade_docker_image terraform/$TFVARS_FILE | awk -F'=' '{print $2}' | xargs)
          echo "RETRO_ARCADE_IMAGE=$RETRO_ARCADE_IMAGE" >> $GITHUB_ENV
          
          # Clone the latest code directly from GitHub
          git clone https://github.com/meetpatel1111/retro-arcade-galaxy.git
          cd retro-arcade-galaxy
          
          docker build --no-cache -t $RETRO_ARCADE_IMAGE .
          docker push $RETRO_ARCADE_IMAGE

      - name: Run Trivy scan on nodejs-app
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.NODEJS_IMAGE }}
          format: table
          exit-code: '0'
          severity: 'CRITICAL,HIGH'
          github-pat: ${{ secrets.GH_PAT }}
          # output: trivy-mini-budget-tracker.sarif

      - name: Run Trivy scan on Retro Arcade Galaxy Web App
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.RETRO_ARCADE_IMAGE }}
          format: table
          exit-code: '0'
          severity: 'CRITICAL,HIGH'
          github-pat: ${{ secrets.GH_PAT }}
          # output: trivy-mini-budget-tracker.sarif

      - name: Terraform Init for Kubernetes
        run: |
          cd terraform
          terraform init -input=false -reconfigure \
            -backend-config="bucket=tf-state-${{ github.event.inputs.environment }}-state" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="region=us-east-1" \
            -backend-config="dynamodb_table=terraform-locks-${{ github.event.inputs.environment }}"

      - name: Update kubeconfig
        run: |
          AWS_REGION=$(grep aws_region terraform/$TFVARS_FILE | awk -F'=' '{print $2}' | xargs)
          CLUSTER_NAME=$(terraform -chdir=terraform output -raw cluster_name)
          aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME

      - name: Install Metrics Server
        run: |
          kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
          kubectl wait --for=condition=available deployment metrics-server -n kube-system --timeout=120s

      - name: Export replicas and HPA settings from TFVARS
        run: |
          # Base replicas for Deployments
          export NGINX_REPLICAS=$(grep nginx_replicas terraform/$TFVARS_FILE | awk -F'=' '{print $2}' | xargs)
          export NODEJS_REPLICAS=$(grep nodejs_replicas terraform/$TFVARS_FILE | awk -F'=' '{print $2}' | xargs)
          export K8SGPT_REPLICAS=$(grep k8sgpt_replicas terraform/$TFVARS_FILE | awk -F'=' '{print $2}' | xargs)
          export RETRO_ARCADE_GALAXY_REPLICAS=$(grep retro_arcade_galaxy_replicas terraform/$TFVARS_FILE | awk -F'=' '{print $2}' | xargs)
          
          # HPA min/max replicas
          export NGINX_HPA_MIN=$(grep nginx_replicas terraform/$TFVARS_FILE | awk -F'=' '{print $2}' | xargs)
          export NGINX_HPA_MAX=$(grep nginx_hpa_max terraform/$TFVARS_FILE | awk -F'=' '{print $2}' | xargs)
          
          export NODEJS_HPA_MIN=$(grep nodejs_replicas terraform/$TFVARS_FILE | awk -F'=' '{print $2}' | xargs)
          export NODEJS_HPA_MAX=$(grep nodejs_hpa_max terraform/$TFVARS_FILE | awk -F'=' '{print $2}' | xargs)
          
          export MINI_BUDGET_HPA_MIN=$(grep mini_budget_replicas terraform/$TFVARS_FILE | awk -F'=' '{print $2}' | xargs)
          export MINI_BUDGET_HPA_MAX=$(grep mini_budget_hpa_max terraform/$TFVARS_FILE | awk -F'=' '{print $2}' | xargs)
          
          export K8SGPT_HPA_MIN=$(grep k8sgpt_replicas terraform/$TFVARS_FILE | awk -F'=' '{print $2}' | xargs)
          export K8SGPT_HPA_MAX=$(grep k8sgpt_hpa_max terraform/$TFVARS_FILE | awk -F'=' '{print $2}' | xargs)

          export RETRO_ARCADE_GALAXY_HPA_MIN=$(grep retro_arcade_galaxy_replicas terraform/$TFVARS_FILE | awk -F'=' '{print $2}' | xargs)
          export RETRO_ARCADE_GALAXY_HPA_MAX=$(grep retro_arcade_galaxy_hpa_max terraform/$TFVARS_FILE | awk -F'=' '{print $2}' | xargs)
          
          # Export to GitHub Actions environment
          echo "NGINX_REPLICAS=$NGINX_REPLICAS" >> $GITHUB_ENV
          echo "NODEJS_REPLICAS=$NODEJS_REPLICAS" >> $GITHUB_ENV
          echo "K8SGPT_REPLICAS=$K8SGPT_REPLICAS" >> $GITHUB_ENV
          echo "RETRO_ARCADE_GALAXY_REPLICAS=$K8SGPT_REPLICAS" >> $GITHUB_ENV
          
          echo "NGINX_HPA_MIN=$NGINX_HPA_MIN" >> $GITHUB_ENV
          echo "NGINX_HPA_MAX=$NGINX_HPA_MAX" >> $GITHUB_ENV
          echo "NODEJS_HPA_MIN=$NODEJS_HPA_MIN" >> $GITHUB_ENV
          echo "NODEJS_HPA_MAX=$NODEJS_HPA_MAX" >> $GITHUB_ENV
          echo "MINI_BUDGET_HPA_MIN=$MINI_BUDGET_HPA_MIN" >> $GITHUB_ENV
          echo "MINI_BUDGET_HPA_MAX=$MINI_BUDGET_HPA_MAX" >> $GITHUB_ENV
          echo "K8SGPT_HPA_MIN=$K8SGPT_HPA_MIN" >> $GITHUB_ENV
          echo "K8SGPT_HPA_MAX=$K8SGPT_HPA_MAX" >> $GITHUB_ENV
          echo "RETRO_ARCADE_GALAXY_HPA_MIN=$RETRO_ARCADE_GALAXY_HPA_MIN" >> $GITHUB_ENV
          echo "RETRO_ARCADE_GALAXY_HPA_MAX=$RETRO_ARCADE_GALAXY_HPA_MAX" >> $GITHUB_ENV
  
      - name: Create Kubernetes Secret from GitHub Secret
        if: ${{ github.event.inputs.provider == 'openai' }}
        run: |
          kubectl create secret generic k8sgpt-secret \
            --from-literal=OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
            --dry-run=client -o yaml | kubectl apply -f -
      
      - name: Create Kubernetes Secret from GitHub Secret
        if: ${{ github.event.inputs.provider == 'google' }}
        run: |  
          kubectl create secret generic k8sgpt-secret \
            --from-literal=GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }} \
            --dry-run=client -o yaml | kubectl apply -f -
            
      - name: Create Secret for Retro Arcade Galaxy
        run: |
          kubectl create secret generic retro-arcade-secret \
            --from-literal=GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Apply Kubernetes Deployments * Services
        run: |
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.13.0/deploy/static/provider/aws/deploy.yaml
          
          # Wait for NGINX controller pods to be ready
          kubectl wait --namespace ingress-nginx \
            --for=condition=ready pod \
            --selector=app.kubernetes.io/component=controller \
            --timeout=180s
          PROVIDER="${{ github.event.inputs.provider }}"
          ENVIRONMENT="${{ github.event.inputs.environment }}" && cp k8s/nginx.yaml k8s/temp.yaml && envsubst < k8s/temp.yaml > k8s/nginx.yaml && rm k8s/temp.yaml && kubectl apply -f k8s/nginx.yaml
          ENVIRONMENT="${{ github.event.inputs.environment }}" && cp k8s/nodejs-app.yaml k8s/temp.yaml && envsubst < k8s/temp.yaml > k8s/nodejs-app.yaml && rm k8s/temp.yaml && kubectl apply -f k8s/nodejs-app.yaml
          # ENVIRONMENT="${{ github.event.inputs.environment }}" && cp k8s/mini-budget-tracker.yaml k8s/temp.yaml && envsubst < k8s/temp.yaml > k8s/mini-budget-tracker.yaml && rm k8s/temp.yaml && kubectl apply -f k8s/mini-budget-tracker.yaml
          ENVIRONMENT="${{ github.event.inputs.environment }}" && cp k8s/k8sgpt-"${PROVIDER}".yaml k8s/temp.yaml && envsubst < k8s/temp.yaml > k8s/k8sgpt-"${PROVIDER}".yaml && rm k8s/temp.yaml && kubectl apply -f k8s/k8sgpt-"${PROVIDER}".yaml
          ENVIRONMENT="${{ github.event.inputs.environment }}" && cp k8s/k8sgpt-setup.yaml k8s/temp.yaml && envsubst < k8s/temp.yaml > k8s/k8sgpt-setup.yaml && rm k8s/temp.yaml && kubectl apply -f k8s/k8sgpt-setup.yaml
          ENVIRONMENT="${{ github.event.inputs.environment }}" && cp k8s/ingress.yaml k8s/temp.yaml && envsubst < k8s/temp.yaml > k8s/ingress.yaml && rm k8s/temp.yaml && kubectl apply -f k8s/ingress.yaml
          ENVIRONMENT="${{ github.event.inputs.environment }}" && cp k8s/retro-arcade-galaxy.yaml k8s/temp.yaml && envsubst < k8s/temp.yaml > k8s/retro-arcade-galaxy.yaml && rm k8s/temp.yaml && kubectl apply -f k8s/retro-arcade-galaxy.yaml
          ENVIRONMENT="${{ github.event.inputs.environment }}" && cp k8s/arcade-ingress.yaml k8s/temp.yaml && envsubst < k8s/temp.yaml > k8s/arcade-ingress.yaml && rm k8s/temp.yaml && kubectl apply -f k8s/arcade-ingress.yaml

          # Wait for Ingress IP/Hostname
          echo "Waiting for Ingress endpoint..."
          INGRESS_NAME="main-ingress"
          for i in {1..30}; do
            EXTERNAL_IP=$(kubectl -n default get ingress $INGRESS_NAME -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            if [ -n "$EXTERNAL_IP" ]; then
              echo "Ingress ready: http://$EXTERNAL_IP"
              break
            fi
            echo "Waiting 10s..."
            sleep 10
          done
          
          # Fallback if still empty
          if [ -z "$EXTERNAL_IP" ]; then
            echo "Ingress hostname not ready yet. Check with: kubectl get ingress $INGRESS_NAME -n $NAMESPACE"
          fi
            
      - name: Verify Kubernetes Deployments & Services
        run: |
          kubectl get deployments -A
          kubectl get svc -A
          kubectl get hpa -A
        