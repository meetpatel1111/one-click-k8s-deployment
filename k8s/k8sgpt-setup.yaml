---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: k8sgpt-analyzer
  namespace: default

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: k8sgpt-read-all
rules:
  - apiGroups: [""]
    resources:
      - pods
      - services
      - events
      - configmaps
      - persistentvolumeclaims
      - nodes
      - namespaces
    verbs: ["get","list","watch"]
  - apiGroups: ["apps"]
    resources:
      - deployments
      - replicasets
      - statefulsets
      - daemonsets
    verbs: ["get","list","watch"]
  - apiGroups: ["batch"]
    resources:
      - jobs
      - cronjobs
    verbs: ["get","list","watch"]
  - apiGroups: ["autoscaling"]
    resources:
      - horizontalpodautoscalers
    verbs: ["get","list","watch"]
  - apiGroups: ["policy"]
    resources:
      - poddisruptionbudgets
    verbs: ["get","list","watch"]
  - apiGroups: ["networking.k8s.io"]
    resources:
      - ingresses
      - networkpolicies
    verbs: ["get","list","watch"]
  - apiGroups: ["admissionregistration.k8s.io"]
    resources:
      - mutatingwebhookconfigurations
      - validatingwebhookconfigurations
    verbs: ["get","list","watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: k8sgpt-read-all-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: k8sgpt-read-all
subjects:
  - kind: ServiceAccount
    name: k8sgpt-analyzer
    namespace: default

---
# Optional: Slack webhook (uncomment to use)
# apiVersion: v1
# kind: Secret
# metadata:
#   name: k8sgpt-slack
#   namespace: default
# type: Opaque
# stringData:
#   webhook: "https://hooks.slack.com/services/XXX/YYY/ZZZ"

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: k8sgpt-analyze
  namespace: default
spec:
  schedule: "*/10 * * * *"
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: k8sgpt-analyzer
          restartPolicy: Never
          containers:
            - name: k8sgpt
              image: ghcr.io/k8sgpt-ai/k8sgpt:latest
              # Analyze everything, explain with LLM, include docs, JSON output, anonymize sensitive fields
              args:
                - analyze
                - --explain
                - --with-doc
                - --output=json
                - --anonymize
              env:
                - name: K8SGPT_BACKEND
                  value: openai
                - name: K8SGPT_MODEL
                  value: gpt-4o
                - name: OPENAI_API_KEY
                  valueFrom:
                    secretKeyRef:
                      name: k8sgpt-secret
                      key: OPENAI_API_KEY
                # - name: SLACK_WEBHOOK
                #   valueFrom:
                #     secretKeyRef:
                #       name: k8sgpt-slack
                #       key: webhook
              command:
                - /bin/sh
                - -c
                - |
                  set -e
                  echo "[k8sgpt] running scheduled analyze..."
                  OUT="$(k8sgpt "$@" 2>&1)" || true
                  echo "$OUT"

                  # Optional: post summary to Slack if issues found
                  # if [ -n "$SLACK_WEBHOOK" ]; then
                  #   echo "$OUT" | grep -Eiq 'Error|Warning|issues' && \
                  #   printf '{"text":"*K8sGPT Findings* (context: %s)\n```%s```"}' "$(kubectl config current-context)" "$(echo "$OUT" | head -c 3500)" \
                  #   | curl -sS -X POST -H 'Content-type: application/json' --data-binary @- "$SLACK_WEBHOOK" || true
                  # fi
              resources:
                requests:
                  cpu: "100m"
                  memory: "128Mi"
                limits:
                  cpu: "500m"
                  memory: "512Mi"

---
# Prometheus Operator only. Safe to apply; does nothing if operator isn't installed.
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: k8sgpt
  namespace: default
spec:
  selector:
    matchLabels:
      app: k8sgpt
  endpoints:
    - port: metrics
      path: /metrics
      interval: 30s
